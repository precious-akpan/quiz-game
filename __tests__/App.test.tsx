// Generated by Qodo Gen

import App from "./src/App";

describe('App', () => {

    // Fetches questions successfully and displays the first question
    it('should fetch questions and display the first question', async () => {
        const mockQuestions = [{ question: 'What is 2+2?', correct_answer: '4' }];
        jest.spyOn(api, 'fetchQuestions').mockResolvedValue(mockQuestions);
        render(<App />);
        expect(await screen.findByText('What is 2+2?')).toBeInTheDocument();
    });

    // Correctly increments score when the correct answer is selected
    it('should increment score on correct answer', async () => {
        const mockQuestions = [{ question: 'What is 2+2?', correct_answer: '4' }];
        jest.spyOn(api, 'fetchQuestions').mockResolvedValue(mockQuestions);
        render(<App />);
        fireEvent.click(await screen.findByText('4'));
        expect(screen.getByText(/Your score: 1/)).toBeInTheDocument();
    });

    // Moves to the next question after an answer is given
    it('should move to next question after answer', async () => {
        const mockQuestions = [
            { question: 'What is 2+2?', correct_answer: '4' },
            { question: 'What is 3+3?', correct_answer: '6' }
        ];
        jest.spyOn(api, 'fetchQuestions').mockResolvedValue(mockQuestions);
        render(<App />);
        fireEvent.click(await screen.findByText('4'));
        expect(await screen.findByText('What is 3+3?')).toBeInTheDocument();
    });

    // Displays "Game Over" message with the final score after the last question
    it('should display game over message with final score', async () => {
        const mockQuestions = [{ question: 'What is 2+2?', correct_answer: '4' }];
        jest.spyOn(api, 'fetchQuestions').mockResolvedValue(mockQuestions);
        render(<App />);
        fireEvent.click(await screen.findByText('4'));
        expect(window.alert).toHaveBeenCalledWith('Game Over! Your score: 1');
    });

    // Shows loading message while questions are being fetched
    it('should show loading message while fetching questions', () => {
        jest.spyOn(api, 'fetchQuestions').mockReturnValue(new Promise(() => {}));
        render(<App />);
        expect(screen.getByText('Loading questions...')).toBeInTheDocument();
    });

    // Handles empty question list gracefully
    it('should handle empty question list gracefully', async () => {
        jest.spyOn(api, 'fetchQuestions').mockResolvedValue([]);
        render(<App />);
        expect(await screen.findByText('Loading questions...')).toBeInTheDocument();
    });

    // Manages API fetch failure and displays an error alert
    it('should display error alert on API fetch failure', async () => {
        jest.spyOn(api, 'fetchQuestions').mockRejectedValue(new Error('Network Error'));
        render(<App />);
        await waitFor(() => expect(window.alert).toHaveBeenCalledWith('Network Error'));
    });

    // Handles scenario where all answers are incorrect
    it('should handle all incorrect answers scenario', async () => {
        const mockQuestions = [{ question: 'What is 2+2?', correct_answer: '4' }];
        jest.spyOn(api, 'fetchQuestions').mockResolvedValue(mockQuestions);
        render(<App />);
        fireEvent.click(await screen.findByText('5'));
        expect(window.alert).toHaveBeenCalledWith('Game Over! Your score: 0');
    });

    // Correctly handles rapid answer submissions
    it('should handle rapid answer submissions correctly', async () => {
        const mockQuestions = [
            { question: 'What is 2+2?', correct_answer: '4' },
            { question: 'What is 3+3?', correct_answer: '6' }
        ];
        jest.spyOn(api, 'fetchQuestions').mockResolvedValue(mockQuestions);
        render(<App />);
        fireEvent.click(await screen.findByText('4'));
        fireEvent.click(screen.getByText('6'));
        expect(window.alert).toHaveBeenCalledWith('Game Over! Your score: 2');
    });

    // Manages state reset or navigation after game completion
    it('should manage state reset or navigation after game completion', async () => {
        const mockQuestions = [{ question: 'What is 2+2?', correct_answer: '4' }];
        jest.spyOn(api, 'fetchQuestions').mockResolvedValue(mockQuestions);
        render(<App />);
        fireEvent.click(await screen.findByText('4'));
        expect(window.alert).toHaveBeenCalledWith('Game Over! Your score: 1');
        // Assuming a reset or navigation logic here for demonstration purposes.
        // Add specific assertions based on actual implementation.
    });

    // Tests UI rendering with CSS modules
    it('should render UI with CSS modules correctly', async () => {
        const mockQuestions = [{ question: 'What is 2+2?', correct_answer: '4' }];
        jest.spyOn(api, 'fetchQuestions').mockResolvedValue(mockQuestions);
        render(<App />);
        expect(screen.getByText('Quiz Game')).toHaveClass(styles.header);
        expect(screen.getByText('What is 2+2?')).toHaveClass(styles.questionContainer);
    });

    // Ensures correct question is displayed based on current index
    it('should display correct question based on current index', async () => {
        const mockQuestions = [
            { question: 'What is 2+2?', correct_answer: '4' },
            { question: 'What is 3+3?', correct_answer: '6' }
        ];
        jest.spyOn(api, 'fetchQuestions').mockResolvedValue(mockQuestions);
        render(<App />);
        fireEvent.click(await screen.findByText('4'));
        expect(await screen.findByText('What is 3+3?')).toBeInTheDocument();
    });
});
